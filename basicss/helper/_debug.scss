@if $debugHelper == true {
/**
 * _debug.scss
 *
 * Author: Marian Friedmann
 *
 * Debugging features & baseline grid
 *
 */

/* Inlinestyles vermeiden! */

[style] {
  outline: 5px solid yellow;
}

/* IDs vermeiden! Zumindest für Styling. Als JS-Selektor spricht nichts gegen IDs. */

[id] {
  outline: 5px solid yellow;
}

/* Leere Elemente */

:empty {
  outline: 5px solid yellow;
}

/**
 * Bilder ohne 'alt' Attribut
 *
 * Leere 'alt' Attribute sind ok und werden "nur" gelb
 * markiert. Fehlt das 'alt' Attribut komplett werden sie
 * rot markiert!
 */

img:not([alt]) {
  outline: 5px solid red;
}

img[alt=""] {
  outline: 5px solid yellow;
}

/* Links ohne 'title' Attribut
 *
 * 'title' Attribute bei Links sind nicht zwingend nötig
 * und die Seite nicht invalide, aber es schadet auf jeden
 * Fall nichts.
 */

a:not([title]) {
  outline: 5px solid yellow;
}

/* Links ohne 'href' */
a[href=""],
a[href="#"],
a[href*="javascript"] {
  outline: 5px solid yellow;
}

/* Sicherstellen, dass Listen nur 'li's als Kinder enthalten dürfen. */

ul,
ol {
  > *:not(li) {
    outline: 5px solid red;
  }
}

/**
 * Tabellen
 */

/* 'tr's als Kinder von 'table' sollten vermieden werden. Was is mit 'thead' und 'tbody'? */

table > tr {
  outline: 5px solid yellow;
}

/* 'tfoot' muss (!) vor (!) 'tbody' stehen. */

tbody + tfoot {
  outline: 5px solid yellow;
}

/**
 * Formulare
 */

/* Formulare brauchen ein 'action' Attribut */

form:not([action]) {
    outline: 5px solid red;
}

/* Pflicht Attribute für einige Inputfelder */

input:not([type]) {
  outline: 5px solid red;
}

textarea:not([rows]) {
  outline: 5px solid red;
}

textarea:not([cols]) {
  outline: 5px solid red;
}

input:not([value])[type=submit] {
  outline: 5px solid red;
}

}//@if $debugHelper

@if $baseline == true {

$baselineColor: $colorBlack;

/* Baseline Grid */

body {
  @if $prototyping {
    $baselineColor: $colorWhite;
    background: $colorBlue;
    color: $colorWhite;
  }
  a {
    color: $colorSilver !important;
    opacity: .7;
  }
  //background: linear-gradient(0deg, rgba(black,.6), rgba(black,0) 5%, rgba(black,0) 50%, rgba(black,.2) 50.1%, rgba(black,0) 55%), linear-gradient(90deg, rgba(black,.3), rgba(black,0) 5%, rgba(black,0) 50%, rgba(black,.2) 50.1%, rgba(black,0) 55%) center center;
  background-image: linear-gradient(0deg, rgba($baselineColor,.6), rgba($baselineColor,0) 5%, rgba($baselineColor,0) 50%, rgba($baselineColor,.2) 50.1%, rgba($baselineColor,0) 55%), linear-gradient(90deg, rgba($baselineColor,.2), rgba($baselineColor,0) 5%, rgba($baselineColor,0) 50%, rgba($baselineColor,.3) 50.1%, rgba($baselineColor,0) 55%);
  //background: linear-gradient(0deg, rgba(black,.6), rgba(black,0) 5%, rgba(black,0) 50%, rgba(black,.2) 50.1%, rgba(black,0) 55%), linear-gradient(90deg, rgba(black,0), rgba(black,0) 45%, rgba(black,.3) 45.1%, rgba(black,.2) 55%, rgba(black,0) 55.1%) center center;
  background-size: toRem($baseUnit) toRem($baseUnit);
}

}//@if $baseline

