@if $gridObject {
$widthHelper: true!global;
/**
 * _grid.scss
 *
 * Author: Marian Friedmann
 *
 * Usage:
 * <div class="grid">
 *   <div class="grid__item  width--1of1  width-tab--1of3  width-desk--1of4">
 *       ...
 *   </div><!--
 *--><div class="grid__item  width--1of1  width-tab--2of3  width-desk--3of4">
 *     <div class="grid">
 *       <div class="grid__item  width--1of1  width-tab--1of2">
 *           ...
 *       </div><!--
 *    --><div class="grid__item  width--1of1  width-tab--1of2">
 *           ...
 *       </div>
 *     </div>
 *   </div>
 * </div>
 *
 * the example above combines the grid items with the widths from helper/_width.scss
 */

.grid {
  list-style: none;
  margin: 0;
  padding: 0;
  @include px-to-rem(margin-left, -$baseUnit);
}

.grid__item {
  display: inline-block;
  vertical-align: top;
  width: 100%;
  @include px-to-rem(padding-left, $baseUnit);
}

/** 
 * Reverse the order of grid items
 */
.grid--reversed {
  direction: rtl;
  text-align: left;

  > .grid__item {
    direction: ltr;
    text-align: left;
  }
}

/** 
 * Grid items without gutters 
 */
.grid--flush {
  margin-left: 0;
  
  > .grid__item {
    padding-left: 0;
  }
}

/** 
 * Grid size variations 
 */
.grid--small {
  @include px-to-rem(margin-left, (-($baseUnit/2)));

  > .grid__item {
    @include px-to-rem(padding-left, $baseUnit/2);
  }
}

.grid--large {
  @include px-to-rem(margin-left, (-($baseUnit*2)));

  > .grid__item,
  > %grid__item {
    @include px-to-rem(padding-left, $baseUnit*2);
  }
}

/** 
 * Text alignment for grid__items
 */
.grid--alignLeft {
  > .grid__item {
    text-align: left;
  }
}

.grid--alignCenter {
  > .grid__item {
    text-align: center;
  }
}

.grid--alignRight {
  > .grid__item {
    text-align: right; 
  }
}

}//@if
